<?php
// $Id: coder_upgrade.module,v 1.1 2009-07-07 14:07:00 solotandem Exp $

/**
 * @file
 * Developer module that assists a contributed module with version upgrade from
 * the Drupal 6.x to 7.x core API. The module creates new code files by
 * modifying existing code files in accordance with the core API changes. The
 * module goal is to enable 6.x module developers to release a 7.x version in
 * conjunction with the release of Drupal 7. The initial 7.x version would be
 * a straight port of features from the 6.x version. Feature changes and
 * other enhancements would then occur subsequent to the initial 7.x release.
 *
 * For a list of core API changes that are handled by this module, see:
 * - http://drupal.org/node/394070
 *
 * Copyright 2008-9 by Jim Berry ("solotandem", http://drupal.org/user/240748)
 */

module_load_include('inc', 'coder_upgrade', 'coder_upgrade');
module_load_include('inc', 'coder_upgrade', 'coder_upgrade.help');
module_load_include('inc', 'coder_upgrade', 'conversions/coder_upgrade.main');
//module_load_include('inc', 'coder_upgrade', 'coder_upgrade.auto'); // Omit from module code

/*
 * TODO Allow for "old" modules to be in other directories
 * - core modules directory (this is illogical)
 * - each site modules directory (this makes sense for Coder review but not upgrade
 *   since converted files from "new" directory will have to be moved to these
 *   directories and will override these files)
 */

/**
 * Implementation of hook_perm().
 */
function coder_upgrade_perm() {
  return array(
    'manage code conversions' => array(
      'title' => t('Manage code conversions'),
      'description' => t('Manage code conversions tasks for Coder Upgrade'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function coder_upgrade_menu() {
  $items = array();

  // Settings related items.
  $items['admin/settings/coder/upgrade'] = array(
    'title' => 'Upgrade',
    'description' => 'Configure the module conversion suite.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('coder_upgrade_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1
  );

  // Conversion items.
  $items['admin/development/coder/upgrade'] = array(
    'title' => 'Upgrade',
    'description' => 'Convert module code from version 6.x to 7.x.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('coder_upgrade_conversions'),
    'access arguments' => array('manage code conversions'),
    'type' => MENU_LOCAL_TASK
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function coder_upgrade_theme() {
  return array(
    'coder_upgrade_extensions_table' => array(
      'arguments' => array('form' => NULL)
    ),
  );
}

/**
 * Implementation of settings form.
 */
function coder_upgrade_settings() {
  $form = array();

  $path = file_directory_path();
  $form['coder_upgrade_dir_old'] = array(
    '#title' => t('Module input directory'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => variable_get('coder_upgrade_dir_old', DEADWOOD_OLD),
    '#description' => t('Directory beneath the file system path (!path) in which to upload 6.x module code. Default is !default.', array('!path' => $path, '!default' => DEADWOOD_OLD)),
    '#size' => 30,
    '#maxlength' => 255,
    '#validate' => array('coder_upgrade_validate_dir_old'),
  );

  $form['coder_upgrade_dir_new'] = array(
    '#title' => t('Module output directory'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => variable_get('coder_upgrade_dir_new', DEADWOOD_NEW),
    '#description' => t('Directory beneath the file system path (!path) in which to save the converted 7.x module code. Default is !default.', array('!path' => $path, '!default' => DEADWOOD_NEW)),
    '#size' => 30,
    '#maxlength' => 255,
    '#validate' => array('coder_upgrade_validate_dir_new'),
  );

  return system_settings_form($form);
}

/**
 * Implementation of settings form sumission.
 *
 * Rename module input and output directories based on user settings.
 */
function coder_upgrade_settings_submit($form, &$form_state) {
  $values = $form_state['values'];
  $op = isset($values['op']) ? $values['op'] : '';

  $cur = variable_get('coder_upgrade_dir_old', DEADWOOD_OLD);
  $new = $op == t('Reset to defaults') ? DEADWOOD_OLD : $values['coder_upgrade_dir_old'];
  if ($new != $cur) {
    $cur = file_directory_path() . '/' . $cur;
    $new = file_directory_path() . '/' . $new;
    rename($cur, $new);
  }

  $cur = variable_get('coder_upgrade_dir_new', DEADWOOD_NEW);
  $new = $op == t('Reset to defaults') ? DEADWOOD_NEW : $values['coder_upgrade_dir_new'];
  if ($new != $cur) {
    $cur = file_directory_path() . '/' . $cur;
    $new = file_directory_path() . '/' . $new;
    rename($cur, $new);
  }
}

/**
 * Display the module conversion form.
 */
function coder_upgrade_conversions(&$form_state) {
  // Set default values.
  list($extensions, $directory, $conversions) = coder_upgrade_conversions_defaults($form_state);

  $form = array();

  $form['extensions'] = array(
    '#type' => 'item',
    '#tree' => TRUE,
    '#theme' => array('coder_upgrade_extensions_table')
  );
  // TODO Refactor this to a helper function?
  $types = array(
    'info' => 'Info files used with module installation',
    'install' => 'PHP code files used with module installation',
    'module' => 'PHP code files',
    'inc' => 'PHP code files',
    'profile' => 'PHP code files used with site installation',
    'theme' => 'PHP code files used with themeing',
    'php' => 'PHP code files'
  );
  foreach ($types as $key => $type) {
    $row = array();
    $row['include'] = array(
      '#type' => 'checkbox',
      '#default_value' => $extensions[$key]
    );
    $row['title'] = array(
      '#type' => 'item',
      '#title' => t('Title'),
      '#value' => $key
    );
    $row['description'] = array(
      '#type' => 'item',
      '#title' => t('Description'),
      '#value' => $type
    );

    $form['extensions'][$key] = $row;
  }

  $options = array();
  $path = realpath(file_directory_path() . '/' . variable_get('coder_upgrade_dir_old', DEADWOOD_OLD));
  $dirs = coder_upgrade_scan_directory($path);
  foreach ($dirs as $dir) {
    $options[$dir] = $dir;
  }
  if (!$dirs) {
    drupal_set_message(t('Please place modules to be converted in @path.', array('@path' => $path)), 'error');
  }

  $form['directory'] = array(
    '#title' => t('Directory (containing 6.x module files)'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => $directory,
    '#description' => t('Directory beneath the module input path (!path) containing the files to be converted to the version 7.x API.', array('!path' => $path))
  );

  $form['convert'] = array(
    '#type' => 'submit',
    '#value' => t('Convert files'),
    '#disabled' => !$dirs
  );

  return $form;
}

/**
 * Implementation of module conversion form validation.
 */
function coder_upgrade_conversions_validate($form, &$form_state) {
  // Gather the file types to convert based on extension.
  $extensions = array();
  $values = $form_state['values']['extensions'];
  foreach ($values as $key => $value) {
    if ($value['include']) {
      $extensions[] = $key;
    }
  }
  if (!count($extensions)) {
    form_set_error('extensions', t('Please select at least one file extension.'));
  }

  // Check for a valid directory.
  if (!$form_state['values']['directory']) {
    form_set_error('directory', t('Please place modules to be converted in directory.'));
  }

  // Gather the conversions to apply.
//  $conversions = array();
//  $conversions = coder_upgrade_conversions_list(); // Temporary!!!
}

/**
 * Execute the module conversion code.
 */
function coder_upgrade_conversions_submit($form, &$form_state) {
  // Rebuild form with user selections.
  $form_state['rebuild'] = TRUE;

  // Define the input and output directories.
  $dirname = file_directory_path() . '/' . variable_get('coder_upgrade_dir_old', DEADWOOD_OLD) . '/' . $form_state['values']['directory'];
  $newdirname = file_directory_path() . '/' . variable_get('coder_upgrade_dir_new', DEADWOOD_NEW) . '/' . $form_state['values']['directory'];

  $params = array();

  // Gather the file types to convert based on extension.
  $extensions = array();
  $values = $form_state['values']['extensions'];
  foreach ($values as $key => $value) {
    if ($value['include']) {
      $extensions[] = $key;
    }
  }
  $params['extensions'] = $extensions;

  // Gather the conversions to apply.
  $conversions = array();
  $conversions = coder_upgrade_conversions_list(); // Temporary!!!
  $params['conversions'] = $conversions;

  // Apply conversion functions.
//  coder_upgrade_start($dirname, $newdirname, $params); // Comment out until conversion routines are committed.
  drupal_set_message(t('Module conversion code was run.'));
}

/**
 * Set the default file extensions to convert.
 *
 * @return array of default values.
 */
function coder_upgrade_conversions_defaults($form_state) {
  // Set defaults when form is first loaded.
  $extensions = array(
    'info' => FALSE,
    'install' => FALSE,
    'module' => FALSE,
    'inc' => FALSE,
    'profile' => FALSE,
    'theme' => FALSE,
    'php' => FALSE
  );
  $directory = 'example';
  $conversions = array(); // If not set below, will be set in coder_upgrade_conversions_table.

  // Set defaults from submitted values.
  if (isset($form_state['values'])) {
    if (isset($form_state['values']['extensions'])) {
      $values = $form_state['values']['extensions'];
      foreach ($values as $key => $value) {
        $extensions[$key] = $value['include'];
      }
    }
    if (isset($form_state['values']['directory'])) {
      $directory = $form_state['values']['directory'];
    }
  }

  return array($extensions, $directory, $conversions);
}

/**
 * Theme the conversion file extension form.
 *
 * @return HTML output.
 */
function theme_coder_upgrade_extensions_table($form) {
  $select_header = theme('table_select_header_cell');
  $header = array($select_header, t('Extension'), t('Description'));
  $rows = array();
  foreach (element_children($form) as $key) {
    $task = &$form[$key];

    $row = array();
    $row[] = drupal_render($task['include']);
    $row[] = '<strong><label for="' . $task['include']['#id'] . '">' . $task['title']['#value'] . '</label></strong>';
    $row[] = $task['description']['#value'];

    $rows[] = $row;
  }

  return theme('table', $header, $rows);
}
