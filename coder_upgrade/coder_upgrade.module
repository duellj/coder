<?php
// $Id: coder_upgrade.module,v 1.19 2010/06/19 00:31:13 solotandem Exp $

/**
 * @file
 * Developer module that assists a contributed module with version upgrade from
 * the Drupal 6.x to 7.x core API. The module creates new code files by
 * modifying existing code files in accordance with the core API changes. The
 * module goal is to enable 6.x module developers to release a 7.x version in
 * conjunction with the release of Drupal 7. The initial 7.x version would be
 * a straight port of features from the 6.x version. Feature changes and
 * other enhancements would then occur subsequent to the initial 7.x release.
 *
 * For a list of core API changes that are handled by this module, see:
 * - http://drupal.org/node/394070
 *
 * Copyright 2008-10 by Jim Berry ("solotandem", http://drupal.org/user/240748)
 */

module_load_include('inc', 'coder_upgrade', 'coder_upgrade');
module_load_include('inc', 'coder_upgrade', 'coder_upgrade.help');
module_load_include('inc', 'coder_upgrade', 'conversions/coder_upgrade.list');

/**
 * Implements hook_permission().
 */
function coder_upgrade_permission() {
  return array(
    'administer code conversions' => array(
      'title' => t('Administer code conversions'),
      'description' => t('Manage code conversion tasks for Coder Upgrade.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function coder_upgrade_menu() {
  // Conversion items.
  $items['admin/config/development/coder/upgrade'] = array(
    'title' => 'Upgrade',
    'description' => 'Convert module code from version 6.x to 7.x.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('coder_upgrade_conversions_form'),
    'access arguments' => array('administer code conversions'),
    'type' => MENU_LOCAL_TASK,
  );

  // Run items.
  $items['admin/config/development/coder/upgrade/run'] = array(
    'title' => 'Run',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // Settings related items.
  $items['admin/config/development/coder/upgrade/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure the module conversion suite.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('coder_upgrade_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );

  // Patch files.
  $items['files/coder_upgrade/patches/%'] = array(
    'title' => 'Patches',
    'description' => 'Display patch file.',
    'page callback' => 'coder_upgrade_patch_display',
    'page arguments' => array(3),
    'access arguments' => array('administer code conversions'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function coder_upgrade_menu_alter(&$items) {
  if (!module_exists('coder_review')) {
    // Redesignate the default menu items.
    $items['admin/config/development/coder']['title'] = 'Coder Upgrade';
    $items['admin/config/development/coder']['page callback'] = 'drupal_get_form';
    $items['admin/config/development/coder']['page arguments'] = array('coder_upgrade_conversions_form');
    $items['admin/config/development/coder/upgrade']['type'] = MENU_DEFAULT_LOCAL_TASK;
  }
}

/**
 * Form builder for the settings form.
 */
function coder_upgrade_settings_form($form, &$form_state) {
  $path = file_directory_path();
  $form['coder_upgrade_dir_old'] = array(
    '#title' => t('Module input directory'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => variable_get('coder_upgrade_dir_old', DEADWOOD_OLD),
    '#description' => t('Directory beneath the file system path (!path) in which to upload 6.x module code. Default is !default.', array('!path' => $path, '!default' => DEADWOOD_OLD)),
    '#size' => 30,
    '#maxlength' => 255,
    '#validate' => array('coder_upgrade_validate_dir_old'),
  );

  $form['coder_upgrade_dir_new'] = array(
    '#title' => t('Module output directory'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => variable_get('coder_upgrade_dir_new', DEADWOOD_NEW),
    '#description' => t('Directory beneath the file system path (!path) in which to save the converted 7.x module code. Default is !default.', array('!path' => $path, '!default' => DEADWOOD_NEW)),
    '#size' => 30,
    '#maxlength' => 255,
    '#validate' => array('coder_upgrade_validate_dir_new'),
  );

  $form['coder_upgrade_dir_patch'] = array(
    '#title' => t('Module patch directory'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => variable_get('coder_upgrade_dir_patch', DEADWOOD_PATCH),
    '#description' => t('Directory beneath the file system path (!path) in which to save the patch files from the converted modules. Default is !default.', array('!path' => $path, '!default' => DEADWOOD_PATCH)),
    '#size' => 30,
    '#maxlength' => 255,
    '#validate' => array('coder_upgrade_validate_dir_patch'),
  );

  $form['coder_upgrade_upgrade_core'] = array(
    '#type' => 'checkbox',
    '#title' => t('Update Drupal core modules'),
    '#default_value' => variable_get('coder_upgrade_upgrade_core', FALSE),
    '#description' => t('If checked, then the list of modules to select for upgrade will be the Drupal core modules. Otherwise, the list will be created from contributed modules.'),
  );

  $form['coder_upgrade_replace_files'] = array(
    '#type' => 'checkbox',
    '#title' => t('Replace files'),
    '#default_value' => variable_get('coder_upgrade_replace_files', FALSE),
    '#description' => t('If checked, then the original file will be replaced with the upgraded file. Otherwise, the upgraded file will only be written to the output directory shown above.'),
  );

  return system_settings_form($form);
}

/**
 * Submit handler for the settings form.
 *
 * Rename module input and output directories based on user settings.
 */
function coder_upgrade_settings_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $op = isset($values['op']) ? $values['op'] : '';

  // TODO Make this into a foreach loop.
  $cur = variable_get('coder_upgrade_dir_old', DEADWOOD_OLD);
  $new = $op == t('Reset to defaults') ? DEADWOOD_OLD : $values['coder_upgrade_dir_old'];
  if ($new != $cur) {
    $cur = file_directory_path() . '/' . $cur;
    $new = file_directory_path() . '/' . $new;
    rename($cur, $new);
  }

  $cur = variable_get('coder_upgrade_dir_new', DEADWOOD_NEW);
  $new = $op == t('Reset to defaults') ? DEADWOOD_NEW : $values['coder_upgrade_dir_new'];
  if ($new != $cur) {
    $cur = file_directory_path() . '/' . $cur;
    $new = file_directory_path() . '/' . $new;
    rename($cur, $new);
  }

  $cur = variable_get('coder_upgrade_dir_patch', DEADWOOD_PATCH);
  $new = $op == t('Reset to defaults') ? DEADWOOD_PATCH : $values['coder_upgrade_dir_patch'];
  if ($new != $cur) {
    $cur = file_directory_path() . '/' . $cur;
    $new = file_directory_path() . '/' . $new;
    rename($cur, $new);
  }
}

/**
 * Form builder for the module conversion form.
 *
 * The tab contents are assembled in helper functions which allows other modules
 * to "customize" this form directly without resorting to hook_form_alter.
 */
function coder_upgrade_conversions_form($form, &$form_state) {
  // Set default values.
  list($upgrades, $extensions, $directories, $modules) = coder_upgrade_conversions_form_defaults($form_state);

  // Build the form.
  $form['tabs'] = array(
    '#type' => 'vertical_tabs',
    '#default_tab' => 'edit-directories',
  );
  $form['tabs']['upgrades'] = coder_upgrade_upgrades_build($upgrades);
  $form['tabs']['extensions'] = coder_upgrade_extensions_build($extensions);
  $form['tabs']['directories'] = coder_upgrade_directories_build($directories);
  $form['tabs']['modules'] = coder_upgrade_modules_build($modules);

  $form['convert'] = array(
    '#type' => 'submit',
    '#value' => t('Convert files'),
//    '#disabled' => empty($form['tabs']['directories']['list']['#options']),
  );

  return $form;
}

/**
 * Returns form content for upgrades tab.
 *
 * @param array $upgrades
 *   User selections or default values.
 * @return array
 *   Form item.
 */
function coder_upgrade_upgrades_build(&$upgrades) {
  // Create the list of upgrade options from the coder upgrade plug-ins.
  // Maintain a secondary list based on title only, to make sorting possible.
  $upgrades_all = _coder_upgrade_upgrades();
  foreach ($upgrades_all as $name => $upgrade) {
    $upgrade_options[$name] = isset($upgrade['link']) ? l($upgrade['title'], $upgrade['link']) : $upgrade['title'];
    if (isset($upgrade['description'])) {
      $upgrade_options[$name] .= ' (' . $upgrade['description'] . ')';
    }
    $upgrades_sort[$name] = $upgrade['title'];
  }

  // Sort the upgrades by title.
  asort($upgrades_sort);
  foreach ($upgrades_sort as $name => $upgrade) {
    $upgrades_sort[$name] = $upgrade_options[$name];
  }

  // Build the upgrade list.
  $header = array(
    'category' => array('data' => t('Category'), 'field' => 'category'),
//    'description' => array('data' => t('Description'), 'field' => 'description'),
  );
  $i = 0;
  $rows = array();
  foreach ($upgrades_sort as $name => $upgrade) {
    $row = array();
    $row['category'] = $upgrades_sort[$name];
    $row['description'] = 'Missing';
    $row['#weight'] = ++$i;

    $rows[$name] = $row;
  }
  $upgrade_fs = array(
    '#type' => 'fieldset',
    '#title' => t('Upgrades'),
    '#description' => t('Apply the selected conversion routines ...'),
    '#tree' => TRUE,
  );
  $upgrade_fs['list'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $rows,
    '#default_value' => isset($upgrades) ? $upgrades : array(),
    '#empty' => t('No routines available'),
  );

  return $upgrade_fs;
}

/**
 * Returns form content for file extensions tab.
 *
 * @param array $extensions
 *   User selections or default values.
 * @return array
 *   Form item.
 */
function coder_upgrade_extensions_build(&$extensions) {
  // Build the file extension list.
  $types = array(
    'inc' => 'PHP code files',
    'info' => 'Info files used with module installation',
    'install' => 'PHP code files used with module installation, update and uninstallation',
    'module' => 'PHP code files',
    'php' => 'PHP code files',
    'profile' => 'PHP code files used with site installation',
    'test' => 'SimpleTest files',
    'theme' => 'PHP code files used with theming',
  );
  $header = array(
    'extension' => array('data' => t('Extension'), 'field' => 'extension'),
    'description' => array('data' => t('Description'), 'field' => 'description'),
  );
  $i = 0;
  $rows = array();
  foreach ($types as $key => $description) {
    $row = array();
    $row['extension'] = $key;
    $row['description'] = $description;
    $row['#weight'] = ++$i;

    $rows[$key] = $row;
  }
  $extension_fs = array(
    '#type' => 'fieldset',
    '#title' => t('Extensions'),
    '#description' => t('... to files with the selected file extensions ...'),
    '#tree' => TRUE,
  );
  $extension_fs['list'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $rows,
    '#default_value' => isset($extensions) ? $extensions : array(),
    '#empty' => t('No extensions available'),
  );

  return $extension_fs;
}

/**
 * Returns form content for directories tab.
 *
 * @param array $directories
 *   User selections or default values.
 * @return array
 *   Form item.
 */
function coder_upgrade_directories_build(&$directories) {
  // Build the directory list.
  $deadwood_dir = variable_get('coder_upgrade_dir_old', DEADWOOD_OLD);
  $path = realpath(file_directory_path() . '/' . $deadwood_dir);
  $dirs = coder_upgrade_scan_directory($path);
  if (!$dirs) {
    drupal_set_message(t('Please place modules to be converted in @path.', array('@path' => $path)), 'error');
  }

  $header = array(
    'name' => array('data' => t('Name'), 'field' => 'name'),
    'path' => array('data' => t('Location'), 'field' => 'path'),
  );
  $i = 0;
  $rows = array();
  foreach ($dirs as $dir) {
    $row = array();
    $row['name'] = isset($directories[$dir]) ? l($dir, coder_upgrade_patch_link($dir)) : $dir;
    $row['path'] = $deadwood_dir . '/' . $dir;
    $row['#weight'] = ++$i;

    $rows[$dir] = $row;
  }
  $directory_fs = array(
    '#type' => 'fieldset',
    '#title' => t('Directories'),
    '#description' => t('... residing in the selected directories (beneath the files directory), or ...'),
    '#tree' => TRUE,
  );
  $directory_fs['list'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $rows,
    '#default_value' => isset($directories) ? $directories : array(),
    '#empty' => t('No directories available'),
  );

  return $directory_fs;
}

/**
 * Returns form content for modules tab.
 *
 * @param array $modules
 *   User selections or default values.
 * @return array
 *   Form item.
 */
function coder_upgrade_modules_build(&$modules) {
  // Build the module list.
  $header = array(
    'name' => array('data' => t('Name'), 'field' => 'name'),
    'path' => array('data' => t('Location'), 'field' => 'path'),
  );
  $i = 0;
  $rows = coder_upgrade_module_list();
  foreach ($rows as $key => $row) {
    $rows[$key]['name'] = isset($modules[$key]) ? l($row['name'], coder_upgrade_patch_link($key)) : $row['name'];
    $rows[$key]['#weight'] = ++$i;
  }
  $module_fs = array(
    '#type' => 'fieldset',
    '#title' => t('Modules'),
    '#description' => t('... residing in the selected modules (beneath the drupal directory).'),
    '#tree' => TRUE,
  );
  $module_fs['list'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $rows,
    '#default_value' => isset($modules) ? $modules : array(),
    '#empty' => t('No modules available'),
  );

  return $module_fs;
}

/**
 * Validation handler for the module conversion form.
 */
function coder_upgrade_conversions_form_validate($form, &$form_state) {
  // Set keys to validate.
  $keys = coder_upgrade_selection_types($form_state);
  $count = 0;
  // Validate the user selections.
  $values = $form_state['values'];
  foreach ($values as $key => $list) {
    if (!in_array($key, $keys)) {
      continue;
    }
    $selections = coder_upgrade_selections_extract($list['list']);
    if (in_array($key, array('upgrades', 'extensions')) && !count($selections)) {
      form_set_error($key, t('Please select at least one item in the %item tab.', array('%item' => ucfirst($key))));
    }
    elseif (in_array($key, array('directories', 'modules'))) {
      $count += count($selections);
    }
  }
  // Determine if keys contains both 'directories' and 'modules'.
  $test = array_diff(array('directories', 'modules'), $keys);
  if (!$count && empty($test)) {
    form_set_error($key, t('Please select at least one item in the %item1 or %item2 tabs.', array('%item1' => ucfirst('directories'), '%item2' => ucfirst('modules'))));
  }
}

/**
 * Submit handler for the module conversion form.
 *
 * Execute the selected module conversion code on the selected file types in the
 * selected directories or modules.
 */
function coder_upgrade_conversions_form_submit($form, &$form_state) {
  // Rebuild form with user selections.
  $form_state['rebuild'] = TRUE;

  // Prepare conversion parameters.
  list($upgrades, $extensions, $items) = coder_upgrade_conversions_prepare($form_state);

  // Apply conversion functions.
  module_load_include('inc', 'coder_upgrade', 'conversions/coder_upgrade.main');
  if (coder_upgrade_start($upgrades, $extensions, $items)) {
    drupal_set_message(t('Module conversion code was run.'));
    drupal_set_message(t('Click to view the !log.', array('!log' => l(t('conversion log file'), coder_upgrade_log_path()))));
    drupal_set_message(t('Patch files may be viewed by clicking on Name links in the Directories and Modules tabs below.'));
  }
  else {
    drupal_set_message(t('Module conversion code was not run.'), 'error');
  }
}

/**
 * Returns the parameters to submit for module conversion.
 */
function coder_upgrade_conversions_prepare($form_state) {
  // Gather the submitted parameters.
  list($upgrades, $extensions, $directories, $modules) = coder_upgrade_selections($form_state);

  // TODO Cache this list so we don't have to query all the files again.
  $upgrades_all = _coder_upgrade_upgrades();
  foreach ($upgrades as $module => $upgrade) {
    $upgrades[$module] = array(
      'files' => isset($upgrades_all[$module]['files']) ? $upgrades_all[$module]['files'] : array(),
    );
  }

  $old_dir = DRUPAL_ROOT . '/' . file_directory_path() . '/' . variable_get('coder_upgrade_dir_old', DEADWOOD_OLD) . '/';
  $new_dir = DRUPAL_ROOT . '/' . file_directory_path() . '/' . variable_get('coder_upgrade_dir_new', DEADWOOD_NEW) . '/';

  // Combine directory and module items into a single list.
  // Omit name from key so as to allow for duplicate names.
  // TODO Handle duplicate names when making new conversion directories.
  // Could intersect keys in $directories, $modules; then add counter suffix to new_dir???
  // Use global counter??? Or copy $directories to files/dirs and $modules to files/modules???
  $items = array();

  foreach ($directories as $key => $directory) {
    $items[] = array(
      'name' => $key,
      'old_dir' => $old_dir . $key,
      'new_dir' => $new_dir . $key,
    );
  }

  $last = 'xx_XX';
  $rows = coder_upgrade_module_list();
  foreach ($modules as $key => $module) {
    if (isset($rows[$key])) {
      $row = $rows[$key];
      if (strpos($row['dir'] . '/', $last . '/') === 0) {
        // Omit modules contained in subdirectory of a parent module.
        continue;
      }
      $last = $row['dir'];
      $items[] = array(
        'name' => $key,
        'old_dir' => $row['dir'],
        'new_dir' => $new_dir . $key,
      );
    }
  }

  return array($upgrades, $extensions, $items);
}

/**
 * Sets the default values to display on the module conversions form.
 *
 * @return array
 *   Arrays of default values.
 */
function coder_upgrade_conversions_form_defaults($form_state) {
  // D7: the key is used (and the value is irrelevant); D6: the value.
  $upgrades = array('coder_upgrade' => 1);

  $extensions = array(
    'inc' => TRUE,
    'info' => TRUE,
    'install' => TRUE,
    'module' => TRUE,
//    'php' => FALSE,
//    'profile' => FALSE,
//    'test' => FALSE,
//    'theme' => FALSE,
  );

  $directories = array(); // 'samples' => 1;

  $modules = array();

  if (!isset($form_state['values'])) {
    return array($upgrades, $extensions, $directories, $modules);
  }

  // Set defaults from submitted values.
  return coder_upgrade_selections($form_state);
}

/**
 * Returns all submitted values.
 *
 * @param array $values
 *   Array of $form_state['values'].
 * @return array
 *   Arrays of submitted values.
 */
function coder_upgrade_selections($form_state) {
  // Initialize these as not all may be set by some form users.
  $upgrades = $extensions = $directories = $modules = array();

  // Set keys to validate.
  $keys = coder_upgrade_selection_types($form_state);

  // Build arrays of each user selection type.
  $values = $form_state['values'];
  foreach ($keys as $key) {
    if (isset($values[$key])) {
      $$key = coder_upgrade_selections_extract($values[$key]['list']);
    }
  }
  return array($upgrades, $extensions, $directories, $modules);
}

/**
 * Returns a list of submitted values.
 *
 * @param array $values
 *   Array slice from $form_state['values'].
 * @return array
 *   Array of submitted values.
 */
function coder_upgrade_selections_extract($values) {
  $selections = array();
  foreach ($values as $key => $value) {
    if ($value) {
      $selections[$key] = $key;
    }
  }
  return $selections;
}

/**
 * Returns a list of selection types.
 *
 * @param array $form_state
 *   Array of form state information.
 * @return array
 *   Array of selection types to process.
 */
function coder_upgrade_selection_types($form_state) {
  if (isset($form_state['defaults']) && is_array($form_state['defaults']) && $form_state['defaults']) {
    return $form_state['defaults'];
  }
  return array('upgrades', 'extensions', 'directories', 'modules');
}

/**
 * Returns list of contributed modules.
 *
 * @param null $core
 *   Indicates whether to return core modules regardless of settings variable.
 * @param integer $status
 *   Indicates status of modules to return.
 * @return array
 *   Array of contributed modules.
 */
function coder_upgrade_module_list($core = NULL, $status = -1) {
  $test = is_null($core) ? variable_get('coder_upgrade_upgrade_core', FALSE) : $core;
  $like = $test ? 'LIKE' : 'NOT LIKE';
  $where = $status == -1 ? '' : 'AND status = :status';

  // Faster to query DB than to rescan files using _system_get_module_data().
  $sql = "SELECT name, filename, type, status, info,
          REPLACE(filename, CONCAT('/', name, '.', type), '') AS directory
          FROM {system}
          WHERE type = 'module'
          AND filename $like 'modules/%'
          $where
          ORDER BY directory, name";
  $default_value = 0;
  $results = db_query($sql, array(':status' => $status));
  $rows = array();
  foreach ($results as $module) {
    $info = unserialize($module->info);
    $row = array();
    $row['name'] = $info['name'];
    $row['path'] = dirname($module->filename); // $module->filename;
    $row['dir'] = $module->directory; // dirname($module->filename);
//    $row['filename'] = $module->filename; // Add this for later calls to module_list().
//    $row['status'] = $module->status;
    // TODO Pull files from this table???
    // Would need to change the conversion code to not read the filesystem.

    $rows[$module->name] = $row;
  }
  return $rows;
}

/**
 * Returns link to patch file.
 *
 * @param string $name
 *   String of the patch filename.
 * @return string
 *   Link to file.
 */
function coder_upgrade_patch_link($name) {
  return 'files/coder_upgrade/patches/' . $name . '.patch';
}

/**
 * Returns patch file wrapped in html tags.
 *
 * @param string $filename
 *   String of the patch filename.
 * @return string
 *   HTML output.
 */
function coder_upgrade_patch_display($filename) {
  echo '<html><head><body><pre>' . check_plain(file_get_contents(coder_upgrade_patch_path($filename))) . '</pre></body></head></html>';
}

/**
 * Returns path to patch file.
 *
 * @param string $filename
 *   String of the patch filename.
 * @return string
 *   Path to file.
 */
function coder_upgrade_patch_path($filename) {
  static $dirname = '';

  if (!$dirname) {
    $dirname = file_directory_path() . '/' . variable_get('coder_upgrade_dir_patch', DEADWOOD_PATCH);
  }
  return $dirname . "/$filename";
}
