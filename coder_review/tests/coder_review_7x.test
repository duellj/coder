<?php
// $Id: coder_review_7x.test,v 1.5 2009-03-11 15:06:58 snpower Exp $

/**
 * @file
 * Set of simpletests for the coder 6.x to 7.x api upgrade review.
 */
require_once dirname(__FILE__) . '/coder_review_test_case.tinc';

class CoderReviewUpgrade7xTest extends CoderReviewTestCase {
  function __construct($id = NULL) {
    parent::__construct('upgrade7x', $id);
  }

  function getInfo() {
    return array(
      'name' => t('Coder Upgrade 7.x Tests'),
      'description' => t('Tests for the coder upgrade7x review.'),
      'group' => t('Coder'),
    );
  }

  function testCoreFunctionsRemoved7x() {
    $this->assertCoderReviewFail('  $referer = referer_uri();');
    $this->assertCoderReviewFail('  if (referer_uri()) {');
    $this->assertCoderReviewPass('  $referer = foo_referer_uri();');

    $this->assertCoderReviewFail('  $clone = drupal_clone($node);');
    $this->assertCoderReviewFail('  if (drupal_clone($node)) {');
    $this->assertCoderReviewPass('  $clone = clone $node;');
    $this->assertCoderReviewPass('  $clone = foo_drupal_clone($node);');
  }

  function testModule7x() {
  }

  function testSystem7x() {
    $this->assertCoderReviewFail('  $foo = $_SESSION["foo"];');
    $this->assertCoderReviewFail('  $foo = $_SESSION[' . "'foo'" . '];');
    $this->assertCoderReviewFail('  if ($_SESSION["foo"]) {');

    $this->assertCoderReviewFail('  $time = time();');
    $this->assertCoderReviewFail('  $time = foo(time());');
    $this->assertCoderReviewPass('  $time = foo_time();');
  }

  function testPermissions7x() {
  }

  function testDatabase7x() {
    $this->assertCoderReviewFail('  $sql = db_rewrite_sql("SELECT n.nid FROM {node}");');
  }

  function testMenu7x() {
  }

  function testBlock7x() {
    $this->assertCoderReviewFail("  function mymodule_block(\$op, \$delta, \$edit) {\n}");
    $this->assertCoderReviewPass("  function mymodule_block(\$delta, \$edit) {\n}");
    $this->assertCoderReviewFail("  function mymodule_block(\$delta, \$edit) {\n  if (\$op == 'list') {\n  }\n}");
    $this->assertCoderReviewFail("  function mymodule_block(\$delta, \$edit) {\n  switch (\$op) {\n  case 'list':\n  }\n}");
  }

  function testComments7x() {
    $this->assertCoderReviewFail('  $comment = _comment_load($cid);');
    $this->assertCoderReviewFail('  if (_comment_load($cid)) {');
    $this->assertCoderReviewPass('  $comment = comment_load($cid);');
    $this->assertCoderReviewPass('  if (comment_load($cid)) {');
  }

  function testActions7x() {
    $this->assertCoderReviewFail('  actions_synchronize($actions_in_code);');
    $this->assertCoderReviewFail('  actions_synchronize($foo, $delete_orphans);');
    $this->assertCoderReviewPass('  actions_synchronize($delete_orphans);');
  }

  function testInput7x() {
  }

  function testTaxonomy7x() {
    $this->assertCoderReviewFail('  db_query("SELECT * FROM {term_data}")');
    $this->assertCoderReviewFail('  db_query("SELECT * FROM {term_hierarchy}")');
    $this->assertCoderReviewFail('  db_query("SELECT * FROM {term_node}")');
    $this->assertCoderReviewFail('  db_query("SELECT * FROM {term_relation}")');
    $this->assertCoderReviewFail('  db_query("SELECT * FROM {term_synonym}")');
    $this->assertCoderReviewFail('  db_query("SELECT * FROM {vocabulary}")');
    $this->assertCoderReviewFail('  db_query("SELECT * FROM {vocabulary_node_types}")');
  }

  function testJavascript7x() {
  }

  function testCss7x() {
  }

  function testTheming7x() {
  }

  function testForm7x() {
  }

  function testFile7x() {
    $this->assertCoderReviewFail('  file_set_status($file, FILE_STATUS_PERMANENT);');
  }

  function testUser7x() {
    $this->assertCoderReviewFail('  user_delete($edit, $uid);');
    $this->assertCoderReviewPass('  foo_user_delete($edit, $uid);');
    $this->assertCoderReviewPass('  function foo_user_delete($edit, $uid) {\n  }');

    $this->assertCoderReviewPass("  function mymodule_user(\$edit, &\$user) {\n}");
    $this->assertCoderReviewFail("  function mymodule_user(\$edit, &\$user) {\n  if (\$op == 'load') {\n  }\n}");
    $this->assertCoderReviewFail("  function mymodule_user(\$edit, &\$user) {\n  switch (\$op) {\n  case 'load':\n  }\n}");

    $this->assertCoderReviewFail('  drupal_goto(\'logout\');');
    $this->assertCoderReviewPass("  drupal_goto('user/logout');");
    $this->assertCoderReviewFail('  $form_state[\'redirect\'] = \'logout\';');
    $this->assertCoderReviewFail('  l(\'my text\', \'logout\');');
    $this->assertCoderReviewFail('  l(t(\'my text\'), \'logout\');');
    $this->assertCoderReviewFail('  l($text, \'logout\');');
    $this->assertCoderReviewPass("  \$form_state['redirect'] = 'user/logout';");
    $this->assertCoderReviewPass("  l('my text', 'user/logout');");
    $this->assertCoderReviewPass("  l(t('my text'), 'user/logout');");
    $this->assertCoderReviewPass("  l(\$text, 'user/logout');");
  }

  function testNode7x() {
    $this->assertCoderReviewFail("  function mymodule_nodeapi(&\$node, \$op, \$teaser, \$page) {\n}");
    $this->assertCoderReviewPass("  function mymodule_nodeapi(&\$node, \$teaser, \$page) {\n}");
    $this->assertCoderReviewFail("  function mymodule_nodeapi(&\$node, \$teaser, \$page) {\n  if (\$op == 'list') {\n  }\n}");
    $this->assertCoderReviewFail("  function mymodule_nodeapi(&\$node, \$teaser, \$page) {\n  switch (\$op) {\n  case 'list':\n  }\n}");
  }

}
