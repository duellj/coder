<?php
require_once(dirname(__FILE__) .'/coder_test_case.tinc');

class CoderStyleTest extends CoderTestCase {
  function get_info() {
    return array(
      'name' => t('Coder Style Tests'),
      'desc' => t('Tests for the coder style review.'),
      'group' => 'Coder'
    );
  }
  
  function setUp() {
  }

  function testStyle() {
    $snippets = array(
      '$some_array[FOO_BAR] = $baz;' => CODER_OK,
      '$some_array[foo_bar] = $baz;' => CODER_NOT_OK,
      // Check tabs.
      '// Tab in	comment' => CODER_OK,
      '$var = "tab in	double quote"' => CODER_OK,
      '$var = \'tab in	single quote\'' => CODER_OK,
      '	$var = "tab in line";' => CODER_NOT_OK,
      // Check that stdClass is OK.
      '  $var = new stdClass();' => CODER_OK,
      '  $var = new StdClass();' => CODER_OK, // should this be OK or not?
      '  $var = new stdclassToo();' => CODER_NOT_OK,
      // Check camelCase within Embedded php.
      '  ?>This is embedded php and should Not trigger a camelCase error.<?php' => CODER_OK,
      "  ?>This second embedded php and should Not trigger\na camelCase error.<?php" => CODER_OK,
      // Check that hex characters aren't camelCase.
      '  $var = 0xFF;' => CODER_OK,
      // Check for <br>.
      '  print "<br>";' => CODER_NOT_OK,
      '  ?><br><?php' => CODER_NOT_OK,
      // Check for UPPERCASE constants.
      '  $a = TRUE;' => CODER_OK,
      '  $atrue = "true";' => CODER_OK,
      '  $a = true;' => CODER_NOT_OK,
      '  $a =true;' => CODER_NOT_OK,
      '  if ($a == true) {' => CODER_NOT_OK,
      '    return false;' => CODER_NOT_OK,
      /* Check for trailing ?> */
      "  print 'hello';\n?>" => CODER_NOT_OK,
      // Check array indexes.
      '  $a[hello] = "hello";' => CODER_NOT_OK,
      '  $a[\'hello\'] = "hello";' => CODER_OK,
      // Check trailing spaces.
      '  $left = "trailing spaces follow";   ' => CODER_NOT_OK,
      '  $left = "no trailing spaces";' => CODER_OK,
      // Check control structures.
      '  if($a == 1){ }' => CODER_NOT_OK,
      '  if ($a == 1) {' => CODER_OK,
      '  }else {' => CODER_NOT_OK,
      '  if ($a == 1) { $b = 2;' => CODER_NOT_OK,
      '  if ($a == 1) {$b = 2;' => CODER_NOT_OK,
      // Check string concatenation.
      '  if ($file = file_check_upload($fieldname . "_upload")) {' => CODER_NOT_OK,
      '  $v .= \'bugger\';' => CODER_OK,
      '  $a = $v .\'bugger\';' => CODER_OK,
      '  $a = $v ."bugger";' => CODER_OK,
      '  $a = $v.\'bugger\';' => CODER_NOT_OK,
      '  $a = $some_func().\'bugger\';' => CODER_NOT_OK,
      '  $a = 1.0 * .1 * 1. * (0.1) * (1.) * (.1) * (1.0);' => CODER_OK,
      // Check heredoc strings.
      "  \$var = <<< __EOD__\n<br>\n__EOD__;" => CODER_NOT_OK,
      "  \$var = <<< __EOD__\n<B>\n__EOD__;" => CODER_NOT_OK,
      "  \$var = <<< __EOD__\n<br/>\n__EOD__;" => CODER_OK,
    );
    $this->runCoderTests($snippets, 'style');
  }
}
